version: "3.9"

services:
  web_server_1:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - SY_network
    ports:
      - "8002:8001"  # พอร์ตที่คุณสามารถเข้าถึง web_server_1 โดยตรงได้
    volumes:
      - ./app:/app
      - ./images:/app/images
    depends_on:
      SY_rabbitmq:
        condition: service_healthy
      sql_server_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - REDIS_HOST=redis
      - RABBITMQ_HOST=SY_rabbitmq
      - REDIS_PORT=6379
      - DATABASE_URL=mssql+pyodbc://sa:S@ny_Device_1997@sql_server_db:1433/mydatabase?driver=ODBC+Driver+17+for+SQL+Server
    restart: always

  web_server_2:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - SY_network
    ports:
      - "8003:8001"
    volumes:
      - ./app:/app
      - ./images:/app/images
    depends_on:
      SY_rabbitmq:
        condition: service_healthy
      sql_server_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - REDIS_HOST=redis
      - RABBITMQ_HOST=SY_rabbitmq
      - REDIS_PORT=6379
      - DATABASE_URL=mssql+pyodbc://sa:S@ny_Device_1997@sql_server_db:1433/mydatabase?driver=ODBC+Driver+17+for+SQL+Server
    restart: always

  web_server_3:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - SY_network
    ports:
      - "8004:8001"
    volumes:
      - ./app:/app
      - ./images:/app/images
    depends_on:
      SY_rabbitmq:
        condition: service_healthy
      sql_server_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - REDIS_HOST=redis
      - RABBITMQ_HOST=SY_rabbitmq
      - REDIS_PORT=6379
      - DATABASE_URL=mssql+pyodbc://sa:S@ny_Device_1997@sql_server_db:1433/mydatabase?driver=ODBC+Driver+17+for+SQL+Server
    restart: always


  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    networks:
      - SY_network
    ports:
      - "80:80"  # ผูกพอร์ตจาก NGINX ที่ทำหน้าที่รับคำขอไปยังหลายๆ instance
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web_server_1
      - web_server_2
      - web_server_3
    restart: always

  redis:
    image: redis:latest
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - SY_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5
  
  SY_rabbitmq:
    image: "rabbitmq:3-management"
    container_name: SY_rabbitmq
    networks:
      - SY_network
    environment:
      RABBITMQ_DEFAULT_USER: "S@ony_devide0102"
      RABBITMQ_DEFAULT_PASS: "S@ony_devide0102"
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      retries: 5
      timeout: 5s

  sql_server_db:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: sql_server_db
    restart: always
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=S@ny_Device_1997
      - MSSQL_DATABASE=mydatabase
    volumes:
      - ./mydatabase_SY:/var/opt/mssql_SY
    networks:
      - SY_network
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD", "pgrep", "sqlservr"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    container_name: adminer
    restart: always
    networks:
      - SY_network
    ports:
      - "8080:8080"
    depends_on:
      - sql_server_db

networks:
  SY_network:
    external: true
