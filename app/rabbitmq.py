import pika
import base64
import json
import zlib
import logging
import cv2
import numpy as np
import os
from face_recognition import extract_face_embedding_rabbitmq
from redis_client import redis_client
from utils import get_best_match
from sqlalchemy.orm import Session
from database import *

db_session = next(get_db())

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RabbitMQ
RABBITMQ_HOST = "SY_rabbitmq"  # ‡∏ä‡∏∑‡πà‡∏≠ Container ‡∏Ç‡∏≠‡∏á RabbitMQ
RABBITMQ_USER = "S@ony_devide0102"
RABBITMQ_PASS = "S@ony_devide0102"
QUEUE_NAME = "face_images"

output_folder = "images"  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå images ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Container
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö RabbitMQ
def get_rabbitmq_connection():
    try:
        credentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)
        parameters = pika.ConnectionParameters(
            host=RABBITMQ_HOST,
            credentials=credentials,
            heartbeat=3000  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ timeout
        )
        connection = pika.BlockingConnection(parameters)
        channel = connection.channel()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ log ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        logging.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RabbitMQ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        return connection, channel
    except pika.exceptions.AMQPConnectionError as e:
        logging.error(f"‚ùå Connection failed: {e}")
        raise

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
def process_image(camera_id, image):
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    output_folder = "images"
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    image_count = len(os.listdir(output_folder)) + 1
    filename = os.path.join(output_folder, f"faces_image_{image_count}_{camera_id}.jpg")

    # ‚úÖ ‡πÉ‡∏ä‡πâ cv2.imwrite() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    success = cv2.imwrite(filename, image)
    if success:
        logging.info(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
    else:
        logging.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id}")

def callback(ch, method, properties, body):
    try:
        message = json.loads(body)
        camera_id = message.get("camera_id")
        image_base64 = message.get("image")

        if camera_id and image_base64:
            logging.info(f"üì© Received Base64 size: {len(image_base64)} characters")

            # Decode Base64
            image_bytes = base64.b64decode(image_base64)
            logging.info(f"üì© Decoded image_bytes size: {len(image_bytes)} bytes")

            # Decompress Data
            decompressed_data = zlib.decompress(image_bytes)
            logging.info(f"üì© Decompressed data size: {len(decompressed_data)} bytes")

            # Convert to NumPy array
            image_array = np.frombuffer(decompressed_data, dtype=np.uint8)
            logging.info(f"üì© Image array size: {image_array.shape if image_array.size > 0 else 'None'}")

            # üîç Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á image_array
            logging.info(f"üì© First 10 bytes of image array: {image_array[:10]}")

            # Decode image
            image = cv2.imdecode(image_array, cv2.IMREAD_UNCHANGED)
            if image is not None:
                logging.info(f"‚úÖ Image successfully decoded! Shape: {image.shape}")
                process_image(camera_id, image)

                 # Get embedding result
                result = extract_face_embedding_rabbitmq(camera_id, image)
                
                if result:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ result ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None
                    embedding_array = np.array(result["embedding"])  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numpy array
                    camera_id = result["camera_id"]  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ camera_id (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    logging.info(f"‚úÖ Extracted embedding from Camera {camera_id}: {embedding_array.shape}")
                    logging.info(f"üîç Type of embedding: {type(result['embedding'])}")
                    logging.info(f"üî¢ First 10 values of embedding: {embedding_array[:10]}")
                    get_best_match(embedding_array, redis_client, camera_id ,db=db_session, threshold=0.60, use_cosine=True)

                else:
                    logging.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á embedding ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id}")


                ch.basic_ack(delivery_tag=method.delivery_tag)
            else:
                logging.error("‚ùå cv2.imdecode() ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                logging.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡πÑ‡∏î‡πâ")

        else:
            logging.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡πÑ‡∏î‡πâ")

    except Exception as e:
        logging.error(f"‚ùå Error processing message: {e}")


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Consumer
def start_consumer():
    connection, channel = get_rabbitmq_connection()
    channel.basic_qos(prefetch_count=1)
    channel.basic_consume(queue=QUEUE_NAME, on_message_callback=callback)
    
    logging.info("üéß Consumer ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å RabbitMQ ...")
    channel.start_consuming()