from fastapi import FastAPI
from database import *
from fastapi import FastAPI, UploadFile, File, Form, Depends
from sqlalchemy.orm import Session
from models import *
from face_recognition import extract_face_vector
import numpy as np
import pickle
import cv2
from redis_client import redis_client
import asyncio
import threading
import logging
from rabbitmq import start_consumer



app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô Consumer ‡πÉ‡∏ô background thread
def start_consumer_thread():
    def run_consumer():
        start_consumer()

    # ‡∏£‡∏±‡∏ô start_consumer() ‡πÉ‡∏ô background thread
    consumer_thread = threading.Thread(target=run_consumer)
    consumer_thread.daemon = True  # ‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô background
    consumer_thread.start()

@app.on_event("startup")
async def startup():
    logging.info("üöÄ FastAPI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
    start_consumer_thread()

@app.on_event("startup")
async def startup():
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô session
    db: Session = next(get_db())

    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á FaceVector
        face_vectors = db.query(FaceVector).all()

        for face_vector in face_vectors:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô dictionary
            face_vector_dict = face_vector.to_dict()

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Redis Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö emp_id
            redis_key = f"face_vector:{face_vector.emp_id}"

            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Redis (‡πÉ‡∏ä‡πâ Pickle ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÑ‡∏ö‡∏ï‡πå)
            redis_client.set(redis_key, pickle.dumps(face_vector_dict))

    finally:
        db.close()

@app.get("/api/vector-redis")
def get_all_face_vectors():
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö face_vector
    keys = redis_client.keys("face_vector:*")

    if not keys:
        raise HTTPException(status_code=404, detail="No face vectors found in Redis")

    face_vectors = []

    for key in keys:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Redis (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á decode ‡πÄ‡∏õ‡πá‡∏ô UTF-8)
        data = redis_client.get(key)

        if data:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å binary ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô dictionary
            face_vector_dict = pickle.loads(data)
            face_vectors.append(face_vector_dict)

    return {"face_vectors": face_vectors}
    
# API ‡∏£‡∏±‡∏ö emp_id ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á SQL Server
@app.post("/api/upload_face")
async def upload_face(emp_id: int = Form(...), file: UploadFile = File(...), db: Session = Depends(get_db)):
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    image_bytes = await file.read()
    np_arr = np.frombuffer(image_bytes, np.uint8)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û OpenCV
    image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
    if image is None:
        return {"error": "Invalid image file"}

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    face_vector = extract_face_vector(image)
    if face_vector is None:
        return {"error": "No face detected"}

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô binary
    binary_vector = pickle.dumps(face_vector)

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    employee = db.query(Employee).filter(Employee.id == emp_id).first()
    if not employee:
        return {"error": "Employee not found"}

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ FaceVector ‡∏Ç‡∏≠‡∏á emp_id ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    face_record = db.query(FaceVector).filter(FaceVector.emp_id == emp_id).first()
    
    if face_record:
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        face_record.vector = binary_vector
    else:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        face_record = FaceVector(emp_id=emp_id, vector=binary_vector)
        db.add(face_record)

    # Commit ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db.commit()

    # ‚úÖ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Redis ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
    face_vector_dict = face_record.to_dict()
    redis_key = f"face_vector:{emp_id}"
    redis_client.set(redis_key, pickle.dumps(face_vector_dict))
    print(f"Updated Redis: {redis_key}")

    return {"message": "Face vector saved successfully"}


